/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class jwpClient */
#include "jwpClient.h"

extern "C" 
{
  #include "wp_client.h"
}



extern "C"
{
#ifdef PMW_DEBUG
#define DBG_PRINT(X) dbg_print((X))
#else
#define DBG_PRINT(X)
#endif 

void dbg_print (const char *m)
{
  fprintf (stderr, m);
}
  
wp_domain_id_t
domain_id_j2c (JNIEnv *env, jobject domainId)
{
  wp_domain_id_t c_domain_id;
  jclass domainClass = env->FindClass ("jwp/jwpDomainId");
  jbyteArray ba;
  jbyte *myBa;
  jfieldID idField = env->GetStaticFieldID (domainClass, "id", "[B");
  ba = (jbyteArray) env->GetStaticObjectField (domainClass, idField);
  myBa = env->GetByteArrayElements (ba, (jboolean*)0);

  for (int i = 0; i < 32; i++)
    {
      c_domain_id.id[i] = (unsigned char)myBa[i];
    }
  
  env->ReleaseByteArrayElements (ba, myBa, 0);
}


void
domain_id_c2j_1 (JNIEnv *env, jobject domainId, wp_domain_id_t c_domain_id)
{
  jclass domainClass = env->FindClass ("jwp/jwpDomainId");
  jbyteArray ba;
  jbyte *myBa;
  jfieldID idField = env->GetStaticFieldID (domainClass, "id", "[B");
  ba = (jbyteArray) env->GetStaticObjectField (domainClass, idField);
  myBa = env->GetByteArrayElements (ba, (jboolean*)0);

  for (int i = 0; i < 32; i++)
    {
      myBa[i] = (jbyte) c_domain_id.id[i];
    }
  
  env->ReleaseByteArrayElements (ba, myBa, 0);
}  


jobject
domain_id_c2j (JNIEnv *env, wp_domain_id_t c_domain_id)
{
  jobject rv;
  rv = env->AllocObject (env->FindClass ("jwp/jwpDomainId"));
  domain_id_c2j_1 (env, rv, c_domain_id);
  return rv;
}
                         

jobjectArray
domain_id_array_c2j (JNIEnv *env, int domain_count, wp_domain_id_t *domain_list)
{
  jobjectArray rv;
  jclass domainClass;
  jfieldID idField;
  jmethodID domainCtor;

  domainClass = env->FindClass ("jwp/jwpDomainId");

  /*  
      idField = env->GetStaticFieldID (domainClass, "id", "[B");
      domainCtor = env->GetMethodID (domainClass, "<init>", "void(V)");
  */

  rv = env->NewObjectArray (domain_count, domainClass, env->AllocObject (domainClass));

  for (int i = 0; i < domain_count; i++)
    {
      jobject elem = env->GetObjectArrayElement (rv, i);
      domain_id_c2j_1 (env, elem, domain_list[i]);
    }

  return rv;
}



/*
 * Class:     jwpClient
 * Method:    bindBlob
 * Signature: (Ljwp/jwpDomainId;Ljava/lang/String;[B)I
 */
JNIEXPORT jint JNICALL Java_jwpClient_bindBlob
  (JNIEnv *env, jclass jo, 
   jobject domainId, 
   jstring name,
   jbyteArray blob)
{
  return -1;
}

/*
 * Class:     jwpClient
 * Method:    bindInt
 * Signature: (Ljwp/jwpDomainId;Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_jwpClient_bindInt
  (JNIEnv *env, jclass jo,
   jobject domainId, 
   jstring name,
   jint value)
{
  return -1;
}

/*
 * Class:     jwpClient
 * Method:    bindString
 * Signature: (Ljwp/jwpDomainId;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_jwpClient_bindString
  (JNIEnv *env, jclass jo, 
   jobject domainId, 
   jstring name, 
   jstring value)
{
  wp_domain_id_t c_domain_id;
  const char *c_name = env->GetStringUTFChars (name, (jboolean*)0);
  const char *c_value = env->GetStringUTFChars (value, (jboolean*)0);
  int rv;

  c_domain_id = domain_id_j2c (env, domainId);

  rv = wp_bind_string (c_domain_id, c_name, c_value);

  env->ReleaseStringUTFChars (name, c_name);
  env->ReleaseStringUTFChars (value, c_value);
  
  return rv;
 
}


/*
 * Class:     jwpClient
 * Method:    lookupString
 * Signature: (Ljwp/jwpDomainId;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_jwpClient_lookupString
  (JNIEnv *env, jclass jo, 
   jobject domainId, 
   jstring name, 
   jstring value)
{
  wp_domain_id_t c_domain_id;
  const char *c_name = env->GetStringUTFChars (name, (jboolean*)0);
  char *c_value;
  int rv;

  c_domain_id = domain_id_j2c (env, domainId);
  rv = wp_lookup_string (c_domain_id, c_name, &c_value);

  value = env->NewStringUTF (c_value);

  env->ReleaseStringUTFChars (name, c_name);
  return rv;
}


/*
 * Class:     jwpClient
 * Method:    done
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jwpClient_done
  (JNIEnv *env, jclass jo)
{
  return wp_done();
}

/*
 * Class:     jwpClient
 * Method:    init
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jwpClient_init
  (JNIEnv *env, jclass jo)
{
  return wp_init();
}

/*
 * Class:     jwpClient
 * Method:    lookupBlob
 * Signature: (Ljwp/jwpDomainId;Ljava/lang/String;[Ljava/lang/Byte;)I
 */
JNIEXPORT jint JNICALL Java_jwpClient_lookupBlob
  (JNIEnv *env, jclass jo, 
   jobject domainId, 
   jstring name, 
   jobjectArray value)
{
  return -1;
}

/*
 * Class:     jwpClient
 * Method:    lookupInt
 * Signature: (Ljwp/jwpDomainId;Ljava/lang/String;Ljava/lang/Integer;)I
 */
JNIEXPORT jint JNICALL Java_jwpClient_lookupInt
  (JNIEnv *env, jclass jo, 
   jobject domainId, 
   jstring name, 
   jobject value)
{
  return -1;
}


/*
 * Class:     jwpClient
 * Method:    findMatchingDomains
 * Signature: (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)[Ljwp/jwpDomainId;
 */
JNIEXPORT jobjectArray JNICALL Java_jwpClient_findMatchingDomains
  (JNIEnv *env, jclass jo, 
   jstring domainName, 
   jstring domainType, 
   jint domainVersion, 
   jstring appName)

{
  const char *c_name, *c_type, *c_app_name;
  jobjectArray rv;
  wp_domain_id_t *domain_list;
  int domain_count;

  c_name = env->GetStringUTFChars (domainName, (jboolean*)0);
  c_type = env->GetStringUTFChars (domainType, (jboolean*)0);
  c_app_name = env->GetStringUTFChars (appName, (jboolean*)0);

  domain_count = wp_find_matching_domains (c_name, c_type, domainVersion, c_app_name, &domain_list);

  rv = domain_id_array_c2j (env, domain_count, domain_list);
  
  env->ReleaseStringUTFChars (domainName, c_name);
  env->ReleaseStringUTFChars (domainType, c_type);
  env->ReleaseStringUTFChars (appName, c_app_name);

  return rv;
}


/*
 * Class:     jwpClient
 * Method:    createDomain
 * Signature: (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljwp/jwpDomainId;
 */
JNIEXPORT jobject JNICALL Java_jwpClient_createDomain
  (JNIEnv *env, jclass jo, 
   jstring domainName, 
   jstring domainType, 
   jint domainVersion, 
   jstring appName)
{
  const char *c_name, *c_type, *c_app_name;
  wp_domain_id_t c_domain_id;
  
  c_name = env->GetStringUTFChars (domainName, (jboolean*)0);
  c_type = env->GetStringUTFChars (domainType, (jboolean*)0);
  c_app_name = env->GetStringUTFChars (appName, (jboolean*)0);

  c_domain_id = wp_create_domain (c_name, c_type, domainVersion, c_app_name);

  env->ReleaseStringUTFChars (domainName, c_name);
  env->ReleaseStringUTFChars (domainType, c_type);
  env->ReleaseStringUTFChars (appName, c_app_name);
  
  return domain_id_c2j (env, c_domain_id);
}


} // matches extern "C"

